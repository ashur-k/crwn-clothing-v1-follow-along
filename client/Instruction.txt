To create project 
    => npx create-react-app crwn-clothing --template cra-template-pwa

    Normally we use this 
        => npx create-react-app crwn-clothing

    I have used this command so I can create same tempalte as it was created in video

    [All that changed is that you are saying you want to run 
    create-react-app with the PWA (progressive web app) template 
    which adds the service-worker.js file. If you don't do this, 
    do not worry, there are just some additional steps that you 
    will have to do in the future when we get to the PWA section of 
    the course :)]

Commands Given When app was created:

    ==> yarn start
       Starts the development server.

    ==> yarn build
        Bundles the app into static files for production.

    ==>  yarn test
         Starts the test runner.

    ==> yarn eject
        Removes this tool and copies build dependencies, configuration files
        and scripts into the app directory. If you do this, you canâ€™t go back!

    ==> cd crwn-clothing
    ==> yarn start

    Installed NODE 
      ==> yarn add node-sass
        Copy pasted homepage.style.scss file

    After following along these steps server was showing error:
        Please note in video toutorial this error was shown while when instructor 
        first started server, and I didn't saw that error, I didn't follow steps 
        but later when I tried to get output on browser I was getting following error
            #############################################################
            Node Sass version 6.0.0 is incompatible with ^4.0.0 || ^5.0.0.
            Compiling...
            Failed to compile.
            #############################################################

        To solve error I tried to run following command and it didn't work on 
        powershell and commandprompt terminals, but when I tried the same following
        commands on git bash terminal they worked. Please follow them along in same order

                and make sure you are in the project directory { crwn-clothing  }

            ==> rm -rf yarn.lock
            ==> rm -rf node_modules
            ==> yarn

        Installing React Router Dome With yarn
            => yarn add react-router-dom

        Setting up FireBase:
            Created new project at firebase site
            started new database

            to install firebase:
                => yarn add firebase
            
        Installing Redux
            => yarn add redux redux-logger react-redux

        Installing Redux-persist

           ==> yarn add redux-persist

           =>yarn add lodash.memoize

           Setting Up Stripe

                ==> yarn add react-stripe-checkout

        Installing Heroku CLI from following link
            ==> https://devcenter.heroku.com/articles/heroku-cli#download-and-install

            to check if heroku cli is installl 
                => heroku --version

                => heroku login - - - and then in newly browser window click login
                => if this method not work try heroku login -i

                => heroku create ash-crwn-live --buildpack https://github.com/mars/create-react-app-buildpack.git

                => git push heroku main

                CSS in Java script
                Learning using style componenets
                    ==> yarn add styled-components


Firebase:
    Query Reference:


=> yarn add redux-thunk

=> yarn add redux-saga

Sequnce of flow:
    First create user.types,
    second create actions,
    third create reducers,
    fouth update code in component where it get triggered
        for this action is required to imported in function 
    fifth sagas are going to be written:

    components trigger actions, actions calls reducers, 
    reducers and action knows same types constants and sagas 
    are making sure everything is asynch

React Hooks Explanation:
    Normally we use this.state in an class componenets to manage state.
    Which we can change by using this.setstate
    
    Hooks is the way for us right functional componenets and gain accessbility
    which previously was with us only if write classes components

    In order to use hook we need to import them from react library
    In this lesson I am going to look at 2 main Hooks

    First One  ======== useState hook:
        import { useState } from 'react'
            it gives control to internal state components

    useState is a function that gets the parameters 
        to understand use state we first need to see what it gives us back

        It gives us back an array with 2 values in it
         arrray destucturing
         const arr = [1,2,3]
         const [a,b,c] = arr
        
        const [name, setName] = useState(); so in useState parematers we can give
        intial value of the state which in above case is name

        to change this value onClick={() => setName('abcdef')}

        const [name, setName] = useState();
        const [address, setAddress] = useState();

        onClick={() => setName('abcdef')}
        onClick={() => setAddress('City')}

    Second is ======== useEffect hook:
    It gives us the ablity to fire effects inside our funcitonal components

    import React, { useState, useEffect } from 'react'

    const [user, setUser] = useState(null);
    const [searchQuery, setSearchQuery] = useState('Bret')

    useEffect does not get back any value back insteat it gives us the function
    that gets called/fire when ever component changes, or wheneve component updates 
    and rerender

    

    useEffect(() => {
        console.log("hello")
    })

    when our component mounts for first time this effect will fire because
    this is mimicing component did mount life cycle, the effect will fire as well when we 
    rerender our component in our case if we update value in below input box

    Inside component
    <input type='search' value={searchQuery} 
        onChange={event => setSearchQuery(event.target.value)}
        />

    So what if we don't want to fire our useEffect method on every update
    what if we only want to fire it in similar way component did mount

    the only way to do that is to pass secondary parameter in useEffect
    now this secondary parameter will be an array

    useEffect(() => {
        console.log("hello")
    }, []) =======> what this array takes is properties that this effect
    has access to that will trigger a rerender, 
    
    so in case if we only want to rerender when searchQuery changes we can pass
    that value in array to trigger rerender

    useEffect(() => {
        console.log("hello")
    }, [searchQuery])


    // we can directly make useEffect async function, becasue async return promise
    // and useEffect cannot return a value
    useEffect(() => {
        const fetchFunc = async () => {
            const reponse = await fetch (
                `https://api-address/user?username=${searchQuery}`
            );
            const resJson = await reponse.json();
            setUser(resJson[0]);
        };
        fetchFunc();
    }, [searchQuery])
    so this effect only will execute when the searcQuery is changing.


    UseEffect won't be call inside conditional as there is a rule useEffect must be
    called at top level, if we want to leverage conditional we must put it inside useEffect.
    
    srrting up server side for react
    created folder called client
    mover all react stuff into client
    installing below node package
    npm i -g nodemon

    run yarn command to install all packages from package.json 
    yarn

    then
    yarn start  

    added this code to packaage.json, node version and npm versions
    are required to take from coonads npv --version and node --version or npm -v, node -v
    "engines": {
    "node": "14.17.1",
    "npm": "7.18.1"
  },

  yarn add axios

  deploying to heroku production
    git remote
    git push heroku main
    heroku open

    yarn add compression f
        for gzipping on heroku